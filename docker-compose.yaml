services:

  # The WebRTC TURN server (note that you will need TCP and UDP ports 3478 and 49152-65535 exposed for TURN relaying to function correctly)
  turnserver:
    image: "coturn/coturn:4.5.2"
    init: true
    networks:
      custom_network:
      #network_mode: "host"
    command: ["-a", "-v", "-n", "-u", "user:password", "-p", "3478", "-r", "default-realm", "--no-dtls", "--no-tls"]

  # The Cirrus signalling server
  # (Note that we use the short release number, e.g. "5.1" rather than "5.1.0", to match the new signalling server image tagging scheme)

  signalling:
    image: "860676471817.dkr.ecr.ap-southeast-1.amazonaws.com/ghcr.io/epicgames/pixel-streaming-signalling-server:latest"
    init: true
      #network_mode: "host"
    ports:
      - "81:80"
      #- "8888:8888"
    command:
      - "--publicIp=${PUBLIC_IP}"
      - >-
        --peerConnectionOptions={
            "iceServers":[
              {
                "urls": ["stun:stun.l.google.com:19302"]
              },
              {
                "urls": ["turn:${PUBLIC_IP}:3478"],
                "username": "user",
                "credential": "password"
              }
            ]
            ${EXTRA_PEERCONNECTION_OPTIONS}
          }
    networks:
      custom_network:
    depends_on:
      - turnserver

  # The Pixel Streaming demo project
  project:
    image: "860676471817.dkr.ecr.ap-southeast-1.amazonaws.com/metaverse-client:signalling"
    build:
      context: project
      args:
        RELEASE: "4.27.2"
    #network_mode: "host"
      #command: ["-RenderOffscreen", "-Windowed", "-ForceRes", "-ResX=1920", "-ResY=1080", "-PixelStreamingIP=signalling", "-PixelStreamingPort=8888"]
    networks:
      custom_network:
    depends_on:
      - signalling

    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            capabilities: [gpu]
            count: 1

networks:
  custom_network:
    name: ${MY_NETWORK}
    driver: bridge
